[
  {
    "title": "WP_User_Query – Class | Developer.WordPress.org",
    "url": "https://developer.wordpress.org/reference/classes/wp_user_query/",
    "content": "WordPress Developer Resources\nWP_User_Query\n↑Back to top\nCore class used for querying users.\nThis class allows querying WordPress database tables ‘wp_users‘ and ‘wp_usermeta‘.\nShow users associated with certain role.\nDisplay Administrator role users\nDisplay Subscriber role users\nDisplay all users except Subscriber role users\nShow specific users.\nDisplay specific users list\nDisplay all users except a specific list of users\nShow users associated with certain blog on the network.\nDisplay users from blog 33\nSearch users.\nWe can use theuser_search_columnsfilter to modify the search columns.\nDisplay users based on a keyword search\nDisplay users based on a keyword search, only on login and email columns\nLimit retrieved Users.\nDisplay 10 users\nDisplay 5 users starting from 25\nSort retrieved Users.\nDisplay users sorted by Post Count, Descending order\nDisplay users sorted by registered, Ascending order\nDate queries are handled through to theWP_Date_Queryobject and are applied to theuser_registeredfield.\nAvailable sinceversion 4.1.\nFind users that registered during the last 12 hours:\nShow users associated with a certain custom field.\nTheWP_Meta_Queryclass is used to parse this part of the query since3.2.0, so check the docs for that class for the full, up to datelist of arguments.\nDisplay users from Israel\nDisplay users under 30 years old\nMultiple custom user fields handling\nWhich users?\nDisplay only authors\nEquals to:\nSet return values.\nReturn an array ofWP_Userobject\nReturn List all blog editors, return limited fields in resulting row objects:\n\nView all referencesView on TracView on GitHub\nWordPressWP_User_QueryGenerator:\nhttps://GenerateWP.com/wp_user_query/\nIf you want to search a user by first_name / last_name / description and the default search_columns.\nIn addition to Dave answer above, while dealing with custom roles1. We must use “slug”, but not “name” (only if you have space(” “) in your role name like “Wholesale Customer”\n2. If you want to query in more roles esp. c"
  },
  {
    "title": "WP_User_Query class explained - Users Insights",
    "url": "https://usersinsights.com/wp-user-query/",
    "content": "This article provides a detailed overview of theWP_User_Queryclass in WordPress. TheWP_User_Queryclass is used in WordPress to retrieve and manage user data by providing a flexible way to query and filter user information based on specified parameters.In this article, we’ll explore its main functionalities, break down search parameter options, dissect essential methods, and guide you on how to handle the returned data.\n\nBefore we dive into the specifics, let’s see an example of how to use theWP_User_Queryclass.\nTheWP_User_Queryclass constructor accepts one parameter – an associative array of search arguments. These arguments allow searching users by various information stored in theWordPress database. In the following sections, we’ll cover the accepted arguments in more detail.\nHere is an example of instantiating a query that searches users with a subscriber role.\nTo run the query and return the results, we can use theget_results()method. Once this method is called, anSQL database queryis run to fetch the matched results:\nTheget_results()method returns an array of the found users. Each user result is an instance of theWP_Userclass. If no users match the given criteria, an empty array is returned. That’s why it is recommended to verify the existence of results before proceeding with any operations to avoid errors in the code.\nHere is a basic example of how to use theWP_User_Queryclass:\nThe main user attributes are the columns that are stored in thewp_usersdatabase table, and they include:\nYou can search by any of these attributes by using the search and search_columns attributes of theWP_User_Queryclass:\nLet’s see some examples now.\nThe following example shows how to search users byemail– it is an exact match, meaning that only one user will be returned if found:\nAnd here is an example of how to get all users whose email is from the example.com domain, i.e. their email ends with “@example.com”:\nThe following example illustrates how to search users by their display na"
  },
  {
    "title": "How To Use WP_User_Query For WordPress User Queries",
    "url": "https://tommcfarlin.com/wp_user_query/",
    "content": "Software Engineering in WordPress, PHP, and Backend Development\nEarlier this week, I published a post on how tofind users in WordPress by using meta data. In short, I have a collection of users each of which have unique meta data and I needed to locate a user based on said meta data.\nIn the comments, Curtis of@WPThemeTutrecommended I check outWP_User_Queryas opposed to way that Iwasdoing it (which I’ll cover momentarily).\nBecause the WordPress API has a tendency to introduce new functions for querying specific data in later releases, and because I try to be a proponent of using the newer methods, I wanted to coverWP_User_Queryin a bit more detail.\n\nIf you read mypost from earlierthis week, then you’ll currently see my function usingWP_User_Query.\nOriginally, however, this is what I was doing:\nSimple enough – it’s nothing more than a call toget_usersand then passing in an array of parameters on which to search, but rather than returning the array of users, it returns the first one.\nOf course, you could generalize it and have it return$users. Either way, that’s beside the point.\nAfter Curtis’s suggestion, I ended up implementing the above function like this:\nSubtle differences, right? Again, you could just as easily return$user_query->get_results()rather than the first user that matches the search, but that’s neither here nor there.\nThe first way worked fine, so why swap to the new method? Simply put, WordPress has been introducing new features to its API with each new release. Recall that The Right Way™ was once to usequery_postsin order to retrieve post data.\nHowever, as of recent releases,WP_Queryhas become The Right Way™ to do it. It’s a cleaner interface, more powerful, and is the way that’s backed by Automattic and the developer community at large for properly querying the database for a variety of data.\nAll of that to say that this is strikingly similar – just as we’ve got fromquery_poststoWP_Query, we’re going fromget_userstoWP_User_Query.\nIt’s all about forwa"
  },
  {
    "title": "User Query",
    "url": "https://www.userquery.tech/",
    "content": "User Queryprovides instant insights on how customers are using your websiteand helps you increase engagement and revenue.\nLearn where on your web pages are attracting the most user clicks.\nAsk our model about anything you want to know about your users.\nGet a page-by-page flow of how users use your website."
  },
  {
    "title": "Generate WordPress WP_User_Query",
    "url": "https://generatewp.com/wp_user_query/",
    "content": "Overview\nUse this tool to create custom code for WordPress User Query withWP_User_Queryclass.\nUsage\nExamples\nIf you are still learning how to use this tool, check out the following examples:\nGet access to exclusive tools used by advanced WordPress developers.\nAll rights reserved © Extreme Ventures LTD"
  }
]